# atom:set grammar=ruby:
@name Eos Basic Input-Output System
@persist Eos_DeviceInputs:array

if(first()) {
    # Kernel libraries
    #include "mark_iii/lib/drv"
    #include "mark_iii/lib/dev"

    # Kernel drivers
    #include "mark_iii/drv/cs"
    #include "mark_iii/drv/btn"
    #include "mark_iii/drv/kb"
}

# Initialize the system

if(first() | inputClk()) {
    runOnTick(1)

    foreach(Index, Input:string = DeviceInputs) {
        local Device = dev_register(Input)
        drv_updateDevice(Device)
    }

    Keyboards = dev_findAllBy("driver", "kb")
    Screen    = dev_findBy("driver", "cs")

    printTable(Keyboards)
    #printTable(Screen)
}

if(tickClk()) {
    foreach(Index, Keyboard:table = Keyboards) {
        local Value = dev_readString(Keyboard)
        #print(Value)

        # if(Keyboard["lastValue", string] != Value && Value != "") {
        #     Keyboard["lastValue", string] = Value
        #
        #     print(Keyboard["name", string] + ":" + Keyboard["type", string] + " = " + Value)
        #
        #     printTable(Screen)
        #     print(Value)
        #     #dev_writeString(Screen, Value)
        #     #dev_write(Screen, Value)
        #
        # }
    }
}




    # if(Keyboard:count() == 0) {
    #     print("No keyboard connected!")
    # } else {
    #     printTable(Keyboard)
    #
    #     print(drv_read(Keyboard))
    # }
