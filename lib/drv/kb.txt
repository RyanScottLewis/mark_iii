# atom:set grammar=ruby:
@name Keyboard Driver

# -= Includes =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #

if (0) { # All of the core is already loaded, this prevents "No such function" errors
    #include "mark_iii/lib/drv"
}

# -= Standard Functions =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- #

# Read the currently pressed charactor on the keyboard
function number drv_kb_readNumber(Wire:wirelink) {
    local Value                         = Wire[1] # Retrieve the first key in the buffer
    Wire[0]                             = 0       # Clear the first key in the buffer (needed?)
    Wire["Reset Output String", number] = 0       # Reset the buffer (maybe?)

    return Value
}

# Read the currently pressed charactor on the keyboard
function string drv_kb_readString(Wire:wirelink) {
    local Value = drv_kb_readNumber(Wire)
    if (Value == 0) { return "" }
    
    return toChar(Value)
}

# -= Vendor Specific Functions =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

function void drv_kb_kick(Wire:wirelink) {
    Wire["Kick", number] = 0
}

# -= Device Mappings =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= #

if(first()) {
    drv_mapDevice("gmod_wire_keyboard", "kb")
}
